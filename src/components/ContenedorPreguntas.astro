---
import BotonesPreguntas from "./BotonesPreguntas.astro";
import turso from "../lib/turso";
import AstroToast from "astro-toast";

// Función para obtener los datos de la base de datos
async function fetchData() {
  try {
    const result = await turso.execute("SELECT * FROM questionsTable");
    console.log("Query result:", result);
    return result.rows; // Asumiendo que el resultado tiene una propiedad `rows`
  } catch (error) {
    console.error("Error executing query:", error);
    return [];
  }
}

const data = await fetchData();
---

<section class="section-preguntas" data-questions={`${JSON.stringify(data)}`}>
  <article class="article-titulo">
    <h1>Quiz preguntas básicas</h1>
  </article>
  <article class="article-preguntas">
    <h2>Cargando pregunta...</h2>
  </article>
  <article class="article-respuesta-escrita">
    <input
      class="input-respuesta"
      type="text"
      placeholder="Escribe tu respuesta aquí"
    />
  </article>
  <article class="article-botones">
    <div class="contenedor-botones-preguntas">
      <button
        class="custom-button"
        id="previousButton"
        onclick="window.handlePrevious()">Anterior</button
      >
      <button
        class="custom-button"
        id="hintButton"
        onclick="window.handleHint()">Pista</button
      >

      <button
        class="custom-button"
        id="verifyButton"
        onclick="window.handleVerify()">Verificar</button
      >
      <button
        class="custom-button"
        id="nextButton"
        onclick="window.handleNext()">Siguiente</button
      >
    </div>
  </article>
  <article class="article-respuestas">
    <p style="display: none;">Cargando respuesta...</p>
    <!-- Respuesta oculta inicialmente -->
    <div id="hintModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <div id="hintsContainer">
          <ul id="hintList"></ul>
          <p id="noMoreHints" style="display: none; color: red;">
            No hay más pistas disponibles.
          </p>
        </div>
      </div>
    </div>
  </article>
  <article class="aviso"></article>
  <!-- Aviso para mostrar mensajes de intentos -->
</section>

<script>
  import { Notyf } from "notyf";
  import "notyf/notyf.min.css";

  document.addEventListener("DOMContentLoaded", () => {
    const sectionPreguntas = document.querySelector(".section-preguntas");
    const dataQuestionsAttr = sectionPreguntas?.getAttribute("data-questions");
    let targerEnter = "verificar";
    const notyf = new Notyf({
      types: [
        {
          type: "error 1",
          background: "#E6B41A",
          icon: false,
        },
        {
          type: "error 2",
          background: "#FF9247",
          icon: false,
        },
      ],
    });

    if (dataQuestionsAttr) {
      const data = JSON.parse(dataQuestionsAttr);
      const idsList = data.map((item: { id: number }) => item.id);
      // Creando la lista de ids pasados
      const idsPassed: number[] = [];

      // Inicializar currentQuestionIndex con un índice aleatorio
      let currentQuestionIndex = Math.floor(Math.random() * data.length);
      idsPassed.push(currentQuestionIndex); // Agregar el índice inicial a la lista de ids pasados
      let attemptCount = 0;

      // Variable para almacenar las pistas mostradas
      let shownHints = [];

      function handlePrevious() {
        if (idsPassed.length > 1) {
          console.log("Previous question");
          idsPassed.pop(); // Remover el último id (actual)
          currentQuestionIndex = idsPassed[idsPassed.length - 1]; // Usar el penúltimo id
          attemptCount = 0; // Resetear los intentos al cambiar de pregunta
          shownHints = []; // Resetear las pistas mostradas
          clearHints(); // Limpiar la lista de pistas
          updateQuestion();
        } else {
          console.log("No previous questions available.");
        }
      }

      function handleNext() {
        console.log("Next question");
        currentQuestionIndex = Math.floor(Math.random() * data.length);
        idsPassed.push(currentQuestionIndex); // Agregar el nuevo índice a la lista de ids pasados
        attemptCount = 0; // Resetear los intentos al cambiar de pregunta
        shownHints = []; // Resetear las pistas mostradas
        const btnVerificar = document.querySelector(
          "#verifyButton"
        ) as HTMLInputElement;
        btnVerificar.style.display = "block";
        const btnPista = document.querySelector(
          "#hintButton"
        ) as HTMLInputElement;
        btnPista.style.display = "block";
        targerEnter = "verificar";
        clearHints();
        updateQuestion();
        const inputElement = document.querySelector(
          ".input-respuesta"
        ) as HTMLInputElement;
        inputElement.focus();
      }

      function updateQuestion() {
        const questionElement = document.querySelector(
          ".article-preguntas h2"
        ) as HTMLInputElement;
        const answerElement = document.querySelector(
          ".article-respuestas p"
        ) as HTMLInputElement;
        const inputElement = document.querySelector(
          ".input-respuesta"
        ) as HTMLInputElement;
        const currentQuestion = data[currentQuestionIndex] || {};

        if (questionElement) {
          questionElement.textContent =
            String(currentQuestion.question) || "Cargando pregunta...";
        }

        if (inputElement) {
          inputElement.value = "";
          inputElement.style.backgroundColor = "";
          inputElement.disabled = false;
        }

        if (answerElement) {
          answerElement.style.display = "none"; // Ocultar la respuesta inicialmente
          answerElement.textContent =
            String(currentQuestion.answer) || "Cargando respuesta...";
          answerElement.style.backgroundColor = ""; // Restaurar el color de fondo
        }

        attemptCount = 0; // Resetear el contador de intentos
      }

      function handleVerify() {
        const inputElement = document.querySelector(
          ".input-respuesta"
        ) as HTMLInputElement;
        const answerElement = document.querySelector(
          ".article-respuestas p"
        ) as HTMLInputElement;
        const currentQuestion = data[currentQuestionIndex] || {};

        if (inputElement && answerElement) {
          const userAnswer = inputElement.value.trim().toLowerCase();
          const correctAnswer = (currentQuestion.answer || "")
            .trim()
            .toLowerCase();

          attemptCount++;

          if (userAnswer === correctAnswer) {
            answerElement.className = "contenedor-respuesta verde";
            inputElement.disabled = true;
            notyf.success("¡Correcto!");
            targerEnter = "siguiente";

            const btnVerificar = document.querySelector(
              "#verifyButton"
            ) as HTMLInputElement;
            btnVerificar.style.display = "none";

            const btnPista = document.querySelector(
              "#hintButton"
            ) as HTMLInputElement;
            btnPista.style.display = "none";
          } else {
            if (attemptCount >= 3) {
              targerEnter = "siguiente";
              const btnVerificar = document.querySelector(
                "#verifyButton"
              ) as HTMLInputElement;
              btnVerificar.style.display = "none";

              const btnPista = document.querySelector(
                "#hintButton"
              ) as HTMLInputElement;
              btnPista.style.display = "none";

              answerElement.style.display = "block"; // Mostrar la respuesta después de 3 intentos
              answerElement.className = "contenedor-respuesta rojo";
              inputElement.disabled = true;
              notyf.error(
                "Incorrecto. Se han agotado los intentos. Presiona 'Siguiente' para continuar."
              );
            } else {
              if (attemptCount === 1) {
                notyf.open({
                  type: "error 1",
                  message:
                    "Incorrecto. Intenta de nuevo. Te quedan 2 intentos.",
                });
              } else if (attemptCount === 2) {
                notyf.open({
                  type: "error 2",
                  message: "Incorrecto. Intenta de nuevo. Te queda 1 intento.",
                });
              }
            }
          }

          if (attemptCount >= 3 || userAnswer === correctAnswer) {
            answerElement.style.display = "block"; // Mostrar la respuesta después de verificar
          }
        }
      }

      function handleKeyPress(event: any) {
        if (event.key === "Enter" && targerEnter === "verificar") {
          handleVerify();
        } else if (event.key === "Enter" && targerEnter === "siguiente") {
          handleNext();
        }
      }

      function handleHint() {
        const currentQuestion = data[currentQuestionIndex] || {};
        const hints = [
          currentQuestion.hint1,
          currentQuestion.hint2,
          currentQuestion.hint3,
          currentQuestion.hint4,
          currentQuestion.hint5,
        ].filter((hint) => hint !== null);

        if (shownHints.length < hints.length) {
          const nextHint = hints[shownHints.length];
          shownHints.push(nextHint);

          const hintList = document.getElementById("hintList");
          const hintItem = document.createElement("li");
          hintItem.textContent = nextHint;
          hintList?.appendChild(hintItem);

          (
            document.getElementById("noMoreHints") as HTMLInputElement
          ).style.display = "none";

          const modal = document.getElementById(
            "hintModal"
          ) as HTMLInputElement;
          modal.style.display = "block";

          const span = document.getElementsByClassName(
            "close"
          )[0] as HTMLInputElement;
          span.onclick = function () {
            modal.style.display = "none";
          };

          window.onclick = function (event) {
            if (event.target == modal) {
              modal.style.display = "none";
            }
          };
        } else {
          (
            document.getElementById("noMoreHints") as HTMLInputElement
          ).style.display = "block";

          const modal = document.getElementById(
            "hintModal"
          ) as HTMLInputElement;
          modal.style.display = "block";

          const span = document.getElementsByClassName(
            "close"
          )[0] as HTMLInputElement;
          span.onclick = function () {
            modal.style.display = "none";
          };

          window.onclick = function (event) {
            if (event.target == modal) {
              modal.style.display = "none";
            }
          };
        }
      }

      function clearHints() {
        const hintList = document.getElementById(
          "hintList"
        ) as HTMLInputElement;
        hintList.innerHTML = "";
        (
          document.getElementById("noMoreHints") as HTMLInputElement
        ).style.display = "none";
      }

      window.handlePrevious = handlePrevious;
      window.handleNext = handleNext;
      window.handleVerify = handleVerify;
      window.handleHint = handleHint;

      document.addEventListener("keydown", handleKeyPress);

      updateQuestion();
    } else {
      console.error("Attribute 'data-questions' is missing or null.");
    }
  });
</script>

<style>
  .section-preguntas {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100vw;
    height: 100%;
    background-color: #f1f1f1;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: flex-start;
  }
  .article-titulo {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    height: 15%;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: center;
  }
  .article-titulo h1 {
    font-size: 4em;
    color: #000;
  }
  .article-preguntas {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    height: 25%;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: center;
  }

  .article-preguntas h2 {
    font-size: 3em;
    color: #000;
    text-align: center;
  }

  .article-respuesta-escrita {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    height: 15%;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: center;
  }

  .input-respuesta {
    width: 90%;
    max-width: 390px;
    background-color: #f5f5f5;
    color: #242424;
    padding: 0.15rem 0.5rem;
    min-height: 40px;
    border-radius: 4px;
    outline: none;
    border: none;
    line-height: 1.15;
    box-shadow: 0px 10px 20px -18px;
    outline: 1px solid lightgrey;
  }

  .input-respuesta:focus {
    border-bottom: 2px solid #5b5fc7;
    border-radius: 4px 4px 2px 2px;
  }

  .input-respuesta:hover {
    outline: 1px solid grey;
  }

  .article-botones {
    display: flex;
    flex-direction: row;
    align-items: center;
    width: 100%;
    height: 15%;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: center;
  }
  .contenedor-botones-preguntas {
    display: flex;
    flex-direction: row;
    align-items: center;
    width: 40%;
    height: 100%;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: space-evenly;
  }

  .custom-button {
    display: inline-block;
    transition: all 0.2s ease-in;
    position: relative;
    overflow: hidden;
    z-index: 1;
    color: #090909;
    padding: 0.7em 1.7em;
    cursor: pointer;
    font-size: 18px;
    border-radius: 0.5em;
    background: #e8e8e8;
    border: 1px solid #e8e8e8;
    box-shadow:
      6px 6px 12px #c5c5c5,
      -6px -6px 12px #ffffff;
  }

  .custom-button:active {
    color: #666;
    box-shadow:
      inset 4px 4px 12px #c5c5c5,
      inset -4px -4px 12px #ffffff;
  }

  .custom-button:before {
    content: "";
    position: absolute;
    left: 50%;
    transform: translateX(-50%) scaleY(1) scaleX(1.25);
    top: 100%;
    width: 140%;
    height: 180%;
    background-color: rgba(0, 0, 0, 0.05);
    border-radius: 50%;
    display: block;
    transition: all 0.5s 0.1s cubic-bezier(0.55, 0, 0.1, 1);
    z-index: -1;
  }

  #verifyButton:after {
    content: "";
    position: absolute;
    left: 55%;
    transform: translateX(-50%) scaleY(1) scaleX(1.45);
    top: 180%;
    width: 160%;
    height: 190%;
    background-color: #28a745;
    border-radius: 50%;
    display: block;
    transition: all 0.5s 0.1s cubic-bezier(0.55, 0, 0.1, 1);
    z-index: -1;
  }
  #hintButton:after {
    content: "";
    position: absolute;
    left: 55%;
    transform: translateX(-50%) scaleY(1) scaleX(1.45);
    top: 180%;
    width: 160%;
    height: 190%;
    background-color: #ffc107;
    border-radius: 50%;
    display: block;
    transition: all 0.5s 0.1s cubic-bezier(0.55, 0, 0.1, 1);
    z-index: -1;
  }
  #previousButton:after {
    content: "";
    position: absolute;
    left: 55%;
    transform: translateX(-50%) scaleY(1) scaleX(1.45);
    top: 180%;
    width: 160%;
    height: 190%;
    background-color: #808080;
    border-radius: 50%;
    display: block;
    transition: all 0.5s 0.1s cubic-bezier(0.55, 0, 0.1, 1);
    z-index: -1;
  }
  #nextButton:after {
    content: "";
    position: absolute;
    left: 55%;
    transform: translateX(-50%) scaleY(1) scaleX(1.45);
    top: 180%;
    width: 160%;
    height: 190%;
    background-color: #007bff;
    border-radius: 50%;
    display: block;
    transition: all 0.5s 0.1s cubic-bezier(0.55, 0, 0.1, 1);
    z-index: -1;
  }

  #verifyButton:hover {
    color: #ffffff;
    border: 1px solid #28a745;
  }
  #hintButton:hover {
    color: #ffffff;
    border: 1px solid #ffc107;
  }
  #previousButton:hover {
    color: #ffffff;
    border: 1px solid #808080;
  }
  #nextButton:hover {
    color: #ffffff;
    border: 1px solid #007bff;
  }

  #verifyButton:hover:before {
    top: -35%;
    background-color: #28a745;
    transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
  }
  #hintButton:hover:before {
    top: -35%;
    background-color: #ffc107;
    transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
  }
  #previousButton:hover:before {
    top: -35%;
    background-color: #808080;
    transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
  }
  #nextButton:hover:before {
    top: -35%;
    background-color: #007bff;
    transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
  }

  #verifyButton:hover:after {
    top: -45%;
    background-color: #28a745;
    transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
  }
  #hintButton:hover:after {
    top: -45%;
    background-color: #ffc107;
    transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
  }
  #previousButton:hover:after {
    top: -45%;
    background-color: #808080;
    transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
  }
  #nextButton:hover:after {
    top: -45%;
    background-color: #007bff;
    transform: translateX(-50%) scaleY(1.3) scaleX(0.8);
  }

  .article-respuestas {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    height: 30%;
    padding-top: 10px;
  }
  .article-respuestas p {
    padding: 10px;
    border-radius: 7px;
  }

  .contenedor-respuesta.verde {
    background: rgba(9, 255, 0, 0.15);
    border-radius: 16px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(9, 255, 0, 1);
  }

  .contenedor-respuesta.rojo {
    background: rgba(255, 0, 0, 0.15);
    border-radius: 16px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 0, 0, 1);
  }

  /* Estilos para la ventana modal */
  .modal {
    display: none;
    position: fixed;
    z-index: 1;
    padding-top: 60px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgb(0, 0, 0);
    background-color: rgba(0, 0, 0, 0.4);
  }

  .modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
  }

  .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }

  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }
</style>
